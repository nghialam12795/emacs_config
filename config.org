#+AUTHOR: Nghia Lam
#+TITLE: PENMACS Configuration

[[./res/screenshots/workspace.png]]

* Table of Content                                                      :TOC:
- [[#about][About]]
- [[#emacs-startup][Emacs Startup]]
  - [[#system-information][System Information]]
  - [[#personal-information][Personal Information]]
  - [[#setting-default][Setting Default]]
  - [[#file-management][File Management]]
- [[#package-initialize][Package Initialize]]

* About
This is my configuration for the GNUs Emacs, which I call it PENMACS (Penguin x Emacs). WARNING: It's really long.
This configuration is based on my habit, which may not be suitable for some people. This config helps me in daily life works and personal notes.

For Emacs beginner, I'd recommend taking a look at [[https://github.com/hlissner/doom-emacs][doom-emacs]] or [[https://github.com/syl20bnr/spacemacs][Spacemacs]] (Vim Users).

My configuration is mostly inspired from:
- [[https://github.com/rememberYou/.emacs.d][Terencio Agozzino]]
- [[https://github.com/sachac/.emacs.d][Sacha Chua]]

You guys should check them out, they are both really talent. Especially, Sacha has a [[https://sachachua.com/blog/][blog]] about boosting Emacs in life.

* Emacs Startup
** System Information
Here I setup some info for my PENMACS. As my job requires me to work on all OS, you will see a lot of times I need to config for each of them differently.

#+begin_src emacs-lisp :tangle yes
(defvar pemacs/version
  "0.1.1"
  "Penguin Emacs version.")
(defconst my-homepage
  "https://github.com/nghialam12795"
  "My personal Github page.")
(defconst sys/win32
  (eq system-type 'windows-nt)
  "Are we using a Window OS?")
(defconst sys/linux
  (eq system-type 'gnu/linux)
  "Are we using a GNU/Linux OS?")
(defconst sys/macos
  (eq system-type 'darwin)
  "Are we using a Mac OS?")
(defconst emacs/>=26p
  (>= emacs-major-version 26)
  "Emacs is 26 or above.")
#+end_src

** Personal Information
#+begin_src emacs-lisp :tangle yes
(setq-default user-full-name "Nghia Lam"
              user-mail-address "nghialam12795@gmail.com")
#+end_src

** Setting Default
#+begin_src emacs-lisp :tangle yes
(advice-add #'display-startup-echo-area-message :override #'ignore)
(setq-default
  ad-redefinition-action 'accept                   ; Silence warnings for redefinition
  auto-window-vscroll nil                          ; Lighten vertical scroll
  bidi-display-reordering 'left-to-right           ; For optimization
  bidi-paragraph-direction 'left-to-right
  blink-matching-paren nil                         ; Dont blink mathcing paren
  confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
  cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
  compilation-always-kill t                        ; Kill compilation process before starting another
  compilation-ask-about-save nil                   ; Save all buffers on `compile'
  compilation-scroll-output t
  delete-by-moving-to-trash t                      ; Delete files to trash
  display-time-default-load-average nil            ; Don't display load average
  display-time-format "%H:%M"                      ; Format the time string
  fill-column 80                                   ; Set width for automatic line breaks
  fringe-indicator-alist
    (delq (assq 'continuation
                fringe-indicator-alist)
          fringe-indicator-alist)                  ; Remove continuation arrow on the right frame
  help-window-select t                             ; Focus new help windows when opened
  indent-tabs-mode nil                             ; Stop using tabs to indent
  idle-update-delay 1                              ; Slow down update ui a bit
  inhibit-default-init t                           ; Default initialization
  inhibit-startup-message t                        ; Do not show anythings unnecessary
  initial-scratch-message nil                      ; Empty the initial *scratch* buffer
  inhibit-startup-echo-area-message user-full-name ; Show User name
  initial-major-mode 'fundamental-mode
  jit-lock-defer-time nil                          ; Font lock optimization
  jit-lock-stealth-nice 0.1
  jit-lock-stealth-time 0.2
  jit-lock-stealth-verbose nil
  ;; mode-line-format nil                             ; Disable mode line format when startup
  mouse-yank-at-point t                            ; Yank at point rather than pointer
  ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
  recenter-positions '(5 top bottom)               ; Set re-centering positions
  ffap-machine-p-known 'reject                     ; Dont ping thing that look like domain
  frame-inhibit-implied-resize t                   ; Frame optimization
  highlight-nonselected-windows nil                ; Remove highlight on nonselected windows
  hscroll-margin 2                                 ; Horizontal scroll
  hscroll-step 1                                   ; Horizontal step
  fast-but-imprecise-scrolling t                   ; Fast scrolling
  recenter-positions '(top middle bottom)          ; Setup recenter
  scroll-conservatively most-positive-fixnum       ; Always scroll by one line
  scroll-margin 0                                  ; Add a margin when scrolling vertically
  scroll-preserve-screen-position t                ; Reduce cursor lag a bit
  mouse-wheel-scroll-amount '(5 ((shift) . 2))     ; Shift Mouse wheel
  mouse-wheel-progressive-speed nil                ; don't accelerate scrolling
  select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
  sentence-end-double-space nil                    ; End a sentence after a dot and a space
  show-help-function nil                           ; Disable help messages
  show-trailing-whitespace nil                     ; Display trailing whitespaces
  split-height-threshold nil                       ; Disable vertical window splitting
  split-width-threshold nil                        ; Disable horizontal window splitting
  use-file-dialog nil                              ; Disable use file dialog
  use-dialog-box nil                               ; Disable use dialog box
  uniquify-buffer-name-style 'forward              ; Uniquify buffer names
  visible-bell 1                                   ; Turn off annoying sound
  window-combination-resize t                      ; Resize windows proportionally
  x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(cd "~/")                                          ; Move to the user directory
(delete-selection-mode 1)                          ; Replace region when inserting text
(display-time-mode 1)                              ; Enable time in the mode-line
(fringe-mode 0)                                    ; Disable fringes
(fset 'yes-or-no-p 'y-or-n-p)                      ; Replace yes/no prompts with y/n
(global-subword-mode 1)                            ; Iterate through CamelCase words
(mouse-avoidance-mode 'banish)                     ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)               ; Enable downcase-region
(put 'upcase-region 'disabled nil)                 ; Enable upcase-region
(prefer-coding-system 'utf-8-unix)
(set-locale-environment "en_US.UTF-8")
(set-default-coding-systems 'utf-8-unix)
(set-selection-coding-system 'utf-8-unix)
(set-buffer-file-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8)               ; included by set-selection-coding-system
(set-keyboard-coding-system 'utf-8)                ; configured by prefer-coding-system
(set-terminal-coding-system 'utf-8)                ; configured by prefer-coding-system
(setq buffer-file-coding-system 'utf-8)            ; utf-8-unix
(setq save-buffer-coding-system 'utf-8-unix)       ; nil
(setq process-coding-system-alist
      (cons '("grep" utf-8 . utf-8) process-coding-system-alist))
(unless sys/macos (setq command-line-ns-option-alist nil))
(unless sys/linux (setq command-line-x-option-alist nil))
(toggle-frame-maximized)                           ; Toggle maximized

#+end_src

Some specific OS tweak:
#+begin_src emacs-lisp :tangle yes
(when sys/macos
  (setq mac-redisplay-dont-reset-vscroll t
        mac-mouse-wheel-smooth-scroll nil
        ns-pop-up-frames nil
        initial-frame-alist (append '((ns-transparent-titlebar . t)
                                      (ns-appearance . dark)
                                     )
                            )
  )
  (and (or (daemonp)
           (display-graphic-p))
       (require 'ns-auto-titlebar nil t)
       (ns-auto-titlebar-mode +1)
  )
  (setq mac-command-modifier 'meta) ; make cmd key do Meta
  (setq mac-option-modifier 'super) ; make opt key do Super
  (setq mac-control-modifier 'control) ; make Control key do Control
  (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
)
#+end_src
#+begin_src emacs-lisp :tangle yes
(when sys/win32
  (set-selection-coding-system 'utf-16-le)) ; For fixing broken symbol render in Windows. Any ideas why it happened?
#+end_src

Remove unnecessary error warnings
#+begin_src emacs-lisp :tangle yes
(defun penguin-command-error-function (data context caller)
  "Ignore the `buffer-read-only',`beginning-of-buffer',`end-of-buffer' signals.
Then pass DATA, CONTEXT & CALLER to the default handler."
  (when (not (memq (car data) '(buffer-read-only
                                beginning-of-buffer
                                end-of-buffer)))
    (command-error-default-function data context caller)))

(setq command-error-function #'penguin-command-error-function)
#+end_src

Other personal settings will be written to user.el
#+begin_src emacs-lisp :tangle yes
(setq custom-file (expand-file-name "~/.emacs.d/.local/user.el" user-emacs-directory))
;; If user.el is not there, duplicate the template for it
(let ((user-template-file
       (expand-file-name "user_template.el" user-emacs-directory)))
  (if (and (file-exists-p user-template-file)
           (not (file-exists-p custom-file)))
      (copy-file user-template-file custom-file)))

(if (file-exists-p custom-file)
    (load custom-file))
#+end_src

** File Management
I'd like to keep my folder as clean as possible. So I decide to move the auto-generated files around.

*** Folder structure
#+begin_src emacs-lisp :tangle yes
(defvar pemacs-dir (file-truename user-emacs-directory)
  "The path to this emacs.d directory.")
(defvar pcore-dir (concat pemacs-dir "core/")
  "Where essential files are stored.")
(defvar pmodules-dir (concat pemacs-dir "modules/")
  "Where configuration modules are stored.")
(defvar plocal-dir (concat pemacs-dir ".local/")
  "Root directory for local Emacs files.
Use this as permanent storage for files that are safe to share
across systems (if this config is symlinked across several computers).")
(defvar petc-dir (concat plocal-dir "etc/")
  "Directory for non-volatile storage.
Use this for files that don't change much, like servers binaries, external
dependencies or long-term shared data.")
(defvar pcache-dir (concat plocal-dir "cache/")
  "Directory for volatile storage.
Use this for files that change often, like cache files.")
#+end_src

*** Backup Location
#+begin_src emacs-lisp :tangle yes
(defun penguin_backup_file_name (fpath)
  "Backup files in a designated FPATH."
  (let* ((backupRootDir (concat plocal-dir "_backup"))
         (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
         (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
         (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
         backupFilePath))
(setq make-backup-file-name-function 'penguin_backup_file_name)
#+end_src

*** Others
#+begin_src emacs-lisp :tangle yes
(setq-default abbrev-file-name             (concat plocal-dir "abbrev.el")
              auto-save-list-file-name     (concat pcache-dir "autosave")
              pcache-directory             (concat pcache-dir "pcache/")
              recentf-save-file            (concat plocal-dir "recentf")
              mc/list-file                 (concat petc-dir "mc-lists.el")
              server-auth-dir              (concat pcache-dir "server/")
              shared-game-score-directory  (concat petc-dir "shared-game-score/")
              tramp-auto-save-directory    (concat pcache-dir "tramp-auto-save/")
              tramp-backup-directory-alist backup-directory-alist
              tramp-persistency-file-name  (concat pcache-dir "tramp-persistency.el")
              url-cache-directory          (concat pcache-dir "url/")
              url-configuration-directory  (concat petc-dir "url/")
              package-user-dir             (concat plocal-dir "packages"))
#+end_src
* Package Initialize
In order to install packages, use-package is a no-brainer for you.
But first, we need to add some sources
#+begin_src emacs-lisp :tangle yes
(package-initialize)
(setq package-archives '(("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+end_src

Here goes our monster =use-package=
#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally t)
  (setq use-package-enable-imenu-support t))
(eval-when-compile
  (require 'use-package))
(use-package gcmh
  :ensure t
  :init
  (gcmh-mode 1))
(use-package quelpa
  :ensure t
  :defer t
  :custom
  (quelpa-update-melpa-p nil "Don't update the MELPA git repo."))
(use-package quelpa-use-package :ensure t)
;; Package Manager
(use-package paradox
  :custom
  (paradox-column-width-package 27)
  (paradox-column-width-version 13)
  (paradox-execute-asynchronously t)
  (paradox-github-token t)
  (paradox-hide-wiki-packages t)
  :config
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src
